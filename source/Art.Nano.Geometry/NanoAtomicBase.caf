import &StandardImport

class NanoAtomicBase extends BaseObject

  @extendableProperty
    fields:   []
    defaults: {}

  @createAtomic: ({defaults, fields}) ->

    defaults = object f, i in fields with defaults[i]

    @extendFields fields
    @extendDefaults defaults

    fields = @getFields()
    defaults = @getDefaults()

    reusableResult = merge defaults
    [f0] = fields

    f = eval
      """
        (function (reusableResult, defaults) {
          var withReusableResult = function (#{fields.join ','}) {
            #{array field in fields with "reusableResult.#{field} = #{field} - 0;"}
            return reusableResult;
          };
          return {
            withReusableResult: withReusableResult,

            nanoConstructor: function (#{fields.join ','}) {
              if      (#{f0} == null)             {return defaults;}
              else if (typeof #{f0} === 'number') {return withReusableResult(#{fields.join ','});}
              else {throw new Error('not supported');}
            },

            createNanoApplicator: function (f) {
              return function (
                #{fields.join ', '}
              ) {
                return withReusableResult(
                  #{(array f in fields with "f(#{f})").join ', '}
                );
              };
            },

            createNanoCombiner: function (f) {
              return function (
                #{(array f in fields with "a_#{f}").join ', '},
                #{(array f in fields with "b_#{f}").join ', '}
              ) {
                return withReusableResult(
                  #{(array f in fields with "f(a_#{f}, b_#{f})").join ', '}
                );
              };
            },

            createNanoAndTester: function (f) {
              return function (
                #{(array f in fields with "a_#{f}").join ', '},
                #{(array f in fields with "b_#{f}").join ', '}
              ) {
                return #{(array f in fields with "f(a_#{f}, b_#{f})").join ' && '};
              };
            },

            createNanoOrTester: function (f) {
              return function (
                #{(array f in fields with "a_#{f}").join ', '},
                #{(array f in fields with "b_#{f}").join ', '}
              ) {
                return #{(array f in fields with "f(a_#{f}, b_#{f})").join ' || '};
              };
            }
          }
        })

    # generated =
    {withReusableResult,
    nanoConstructor,
    createNanoApplicator,
    createNanoCombiner,
    createNanoAndTester,
    createNanoOrTester} = f reusableResult, defaults
    # log @name, object f in generated with f.toString()

    classMembers = {}
      withReusableResult
      reusableResult
      Default:  defaults
      '':       nanoConstructor

      Add:      createNanoCombiner   (a, b) -> a + b
      Sub:      createNanoCombiner   (a, b) -> a - b
      Mul:      createNanoCombiner   (a, b) -> a * b
      Div:      createNanoCombiner   (a, b) -> a / b

      Eq:       createNanoAndTester  (a, b) -> a == b
      Neq:      createNanoOrTester   (a, b) -> a != b

      Gt:       createNanoAndTester  (a, b) -> a > b
      Gte:      createNanoAndTester  (a, b) -> a >= b
      Lt:       createNanoAndTester  (a, b) -> a < b
      Lte:      createNanoAndTester  (a, b) -> a <= b

    mergeInto
      @
      object v, k from classMembers with-key lowerCamelCase "#{@name} #{k}"
      object name in :floor :ceil :abs with-key lowerCamelCase "#{@name} #{name}"
        createNanoApplicator Math[name]

